@using AppWeb.Shared.Dtos
@using MudBlazor

@inject TableUserVM ViewModel
@implements IDisposable

<MudCard Class="rounded-lg overflow-hidden">
    <MudCardHeader>
        <CardHeaderContent>
            <div class="flex items-center">
                <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Class="mr-3" />
                <MudText Typo="Typo.h6">Users</MudText>
            </div>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        @if (ViewModel.Loading)
        {
            <div class="flex justify-center items-center min-h-[150px]">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
            </div>
        }
        else
        {
            <div class="flex flex-col gap-4">
                <div class="flex justify-between items-center flex-wrap gap-3">
                    <MudTextField @bind-Value="ViewModel.SearchString" Placeholder="Search users..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="flex-grow max-w-[300px]" IconSize="Size.Medium" Immediate="true" />

                    <div class="flex gap-2">
                        @if (ViewModel.SelectedItems.Count > 0)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteSweep" Size="Size.Small" OnClick="@(() => ViewModel.BulkDeleteCommand.Execute(null))">
                                Delete Selected (@ViewModel.SelectedItems.Count)
                            </MudButton>
                        }

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick="@(() => ViewModel.RefreshCommand.Execute(null))">
                            Refresh
                        </MudButton>

                        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(() => ViewModel.AddCommand.Execute(null))">
                            Add User
                        </MudButton>
                    </div>
                </div>

                <MudTable @bind-SelectedItems="ViewModel.SelectedItems"
                          MultiSelection="true"
                          Bordered="true"
                          Striped="true"
                          Dense="true"
                          Hover="true"
                          Elevation="0"
                          RowsPerPage="10"
                          T="UserResultDto"
                          Loading="@ViewModel.Loading"
                          Items="@ViewModel.FilteredUsers"
                          LoadingProgressColor="Color.Primary"
                          Class="overflow-hidden">
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<UserResultDto, object>(x => x.Id)">ID</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<UserResultDto, object>(x => x.Username)">Username</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<UserResultDto, object>(x => x.Email)">Email</MudTableSortLabel>
                        </MudTh>
                        <MudTh class="text-right">Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Username">
                            <div class="flex items-center">
                                <MudAvatar Size="Size.Small" Class="mr-2" Color="Color.Primary">
                                    @(context.Username.Length > 0 ? context.Username[0].ToString().ToUpper() : "?")
                                </MudAvatar>
                                @context.Username
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd class="text-right">
                            <div class="flex justify-end">
                                <MudTooltip Text="View Details">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" Size="Size.Small" OnClick="@(() => ViewModel.ViewCommand.Execute(context))" />
                                </MudTooltip>
                                <MudTooltip Text="Edit User">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="@(() => ViewModel.EditCommand.Execute(context))" />
                                </MudTooltip>
                                <MudTooltip Text="Delete User">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => ViewModel.DeleteCommand.Execute(context))" />
                                </MudTooltip>
                            </div>
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <div class="flex flex-col items-center justify-center p-4">
                            <MudIcon Icon="@Icons.Material.Filled.SentimentDissatisfied" Color="Color.Secondary" Size="Size.Large" />
                            <MudText Class="mt-2">No users found</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Try a different search or add a new user</MudText>
                        </div>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager HorizontalAlignment="HorizontalAlignment.Right" InfoFormat="{first_item}-{last_item} of {all_items}" PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }" />
                    </PagerContent>
                </MudTable>
            </div>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public IReadOnlyList<UserResultDto> Users { get; set; } = Array.Empty<UserResultDto>();
    [Parameter] public EventCallback<List<UserResultDto>> OnBulkDelete { get; set; }
    [Parameter] public EventCallback<UserResultDto> OnDelete { get; set; }
    [Parameter] public EventCallback<UserResultDto> OnEdit { get; set; }
    [Parameter] public EventCallback<UserResultDto> OnView { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public bool Loading { get; set; }

    protected override void OnInitialized()
    { //Register events from view to ViewModel
        ViewModel.OnAdd = OnAdd;
        ViewModel.OnView = OnView;
        ViewModel.OnEdit = OnEdit;
        ViewModel.OnDelete = OnDelete;
        ViewModel.OnRefresh = OnRefresh;
        ViewModel.OnBulkDelete = OnBulkDelete;
        
        //Initial update
        UpdateViewModel();
    }

    //Update ViewModel when parameters change
    protected override void OnParametersSet() { UpdateViewModel(); }
    private void UpdateViewModel() { ViewModel.Users = Users; ViewModel.Loading = Loading; }

    //Clean up resources if needed
    public void Dispose() { }
}