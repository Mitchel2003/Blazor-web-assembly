@using Microsoft.AspNetCore.Components.Web
@using AppWeb.Shared.Inputs
@using AppWeb.Shared.Dtos
@using FluentValidation
@using MudBlazor

@inject FormUserVM ViewModel
@implements IDisposable

<MudCard Class="rounded-lg overflow-hidden">
    <MudCardHeader>
        <div class="flex items-center">
            <MudIcon Icon="@(ViewModel.IsEdit? Icons.Material.Filled.Edit : Icons.Material.Filled.PersonAdd)" Color="Color.Primary" Class="mr-2" />
            <MudText Typo="Typo.h6">@(ViewModel.IsEdit ? "Edit User" : "Create User")</MudText>
        </div>
    </MudCardHeader>

    <MudCardContent Class="pa-4 min-width-300">
        @if (ViewModel.Loading)
        {
            <div class="flex justify-center items-center min-h-[150px]">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
            </div>
        }
        else
        {
            @if (ViewModel.Success)
            {
                <MudAlert Severity="MudBlazor.Severity.Success" Variant="Variant.Filled" Class="mb-4">
                    @(ViewModel.IsEdit ? "User updated successfully!" : "User created successfully!")
                </MudAlert>
            }

            <MudForm @ref="_form" Model="@ViewModel.CurrentModel">
                <FluentValidator TModel="object" Validator="@ViewModel.CurrentValidator" />

                <div class="flex flex-col gap-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                        <div class="col-span-2">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">User Information</MudText>
                            <MudDivider Class="mb-4" />
                        </div>

                        @if (ViewModel.IsEdit)
                        {
                            <div>
                                <MudTextField T="string" @bind-Value="ViewModel.UpdateModel.Username" For="@(() => ViewModel.UpdateModel.Username)" Label="Username" Placeholder="Enter username" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="ViewModel.UpdateModel.Email" For="@(() => ViewModel.UpdateModel.Email)" Label="Email" Placeholder="Enter email address" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Email" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="ViewModel.UpdateModel.Password" For="@(() => ViewModel.UpdateModel.Password)" InputType="InputType.Password" Label="Password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" Variant="Variant.Outlined" />
                            </div>
                        }
                        else
                        {
                            <div>
                                <MudTextField T="string" @bind-Value="ViewModel.CreateModel.Username" For="@(() => ViewModel.CreateModel.Username)" Label="Username" Placeholder="Enter username" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="ViewModel.CreateModel.Email" For="@(() => ViewModel.CreateModel.Email)" Label="Email" Placeholder="Enter email address" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Email" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="ViewModel.CreateModel.Password" For="@(() => ViewModel.CreateModel.Password)" InputType="InputType.Password" Label="Password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="ViewModel.CreateModel.ConfirmPassword" For="@(() => ViewModel.CreateModel.ConfirmPassword)" InputType="InputType.Password" Label="Confirm password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.LockReset" Variant="Variant.Outlined" />
                            </div>
                        }
                    </div>

                    <div class="mt-4">
                        <div class="col-span-2">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Additional Settings</MudText>
                            <MudDivider Class="mb-4" />
                        </div>

                        <div>
                            <MudCheckBox T="bool" @bind-Value="ViewModel.IsActive" Label="Active Account" Color="Color.Primary" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-4">
                                User will be able to log in and access the system
                            </MudText>
                        </div>
                    </div>
                </div>
            </MudForm>
        }
    </MudCardContent>

    <MudCardActions>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined"
                   OnClick="@(() => ViewModel.CancelCommand.Execute(null))"
                   Disabled="@ViewModel.Loading">
            Cancel
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="@HandleSubmitAsync"
                   Disabled="@ViewModel.Loading">
            @(ViewModel.IsEdit ? "Update User" : "Create User")
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    [Parameter] public EventCallback<object> OnValidSubmit { get; set; }
    [Parameter] public UserResultDto? Existing { get; set; }
    private MudForm _form = new();

    protected override void OnInitialized()
    { //Pass parameters to the ViewModel
        ViewModel.MudDialog = MudDialog;
        ViewModel.OnValidSubmit = OnValidSubmit;
        ViewModel.Initialize(Existing);
    }

    private async Task HandleSubmitAsync() { await ViewModel.SubmitCommand.ExecuteAsync(_form); }
    public void Dispose() { } // Implement IDisposable to clean up resources if needed
}