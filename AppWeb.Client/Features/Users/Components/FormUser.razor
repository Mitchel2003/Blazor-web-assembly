@using Microsoft.AspNetCore.Components.Web
@using AppWeb.Shared.Validators
@using FluentValidation.Results
@using AppWeb.Shared.Inputs
@using FluentValidation
@using MudBlazor

<MudCard Class="rounded-lg overflow-hidden">
    <MudCardHeader>
        <div class="flex items-center">
            <MudIcon Icon="@(IsEditMode ? Icons.Material.Filled.Edit : Icons.Material.Filled.PersonAdd)" Color="Color.Primary" Class="mr-2" />
            <MudText Typo="Typo.h6">@(IsEditMode ? "Edit User" : "Create User")</MudText>
        </div>
    </MudCardHeader>

    <MudCardContent Class="pa-4 min-width-300">
        @if (Loading)
        {
            <div class="flex justify-center items-center min-h-[150px]">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
            </div>
        }
        else
        {
            @if (Success)
            {
                <MudAlert Severity="MudBlazor.Severity.Success" Variant="Variant.Filled" Class="mb-4">
                    @(IsEditMode ? "User updated successfully!" : "User created successfully!")
                </MudAlert>
            }

            <MudForm @ref="_form" Model="@Input">
                <FluentValidator TModel="object" Validator="@CurrentValidator" />

                <div class="flex flex-col gap-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                        <div class="col-span-2">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">User Information</MudText>
                            <MudDivider Class="mb-4" />
                        </div>

                        @if (Input is UpdateUserInput updateModel)
                        {
                            <div>
                                <MudTextField T="string" @bind-Value="updateModel.Username" For="@(() => updateModel.Username)" Label="Username" Placeholder="Enter username" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="updateModel.Email" For="@(() => updateModel.Email)" Label="Email" Placeholder="Enter email address" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Email" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="updateModel.Password" For="@(() => updateModel.Password)" InputType="InputType.Password" Label="Password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" Variant="Variant.Outlined" />
                            </div>
                        }
                        else if (Input is CreateUserInput createModel)
                        {
                            <div>
                                <MudTextField T="string" @bind-Value="createModel.Username" For="@(() => createModel.Username)" Label="Username" Placeholder="Enter username" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="createModel.Email" For="@(() => createModel.Email)" Label="Email" Placeholder="Enter email address" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Email" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="createModel.Password" For="@(() => createModel.Password)" InputType="InputType.Password" Label="Password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="createModel.ConfirmPassword" For="@(() => createModel.ConfirmPassword)" InputType="InputType.Password" Label="Confirm password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.LockReset" Variant="Variant.Outlined" />
                            </div>
                        }
                    </div>
                </div>
            </MudForm>
        }
    </MudCardContent>

    <MudCardActions>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" OnClick="@OnCancel" Disabled="@Loading">
            Cancel
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@HandleSubmitAsync" Disabled="@Loading">
            @(IsEditMode ? "Update User" : "Create User")
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public object Input { get; set; } = default!;
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool Loading { get; set; }
    [Parameter] public bool Success { get; set; }

    private MudForm _form = new();
    private readonly CreateUserInputValidator _createValidator = new();
    private readonly UpdateUserInputValidator _updateValidator = new();
    
    private bool IsEditMode => Input is UpdateUserInput;
    public IValidator CurrentValidator => Input is UpdateUserInput ? (IValidator)_updateValidator : _createValidator;

    private async Task HandleSubmitAsync()
    {
        await _form.Validate();
        ValidationResult fvResult = Input is UpdateUserInput updateModel
            ? _updateValidator.Validate(updateModel) 
            : _createValidator.Validate((CreateUserInput)Input);
            
        if (!_form.IsValid || !fvResult.IsValid) return;
        await OnSubmit.InvokeAsync();
    }
}