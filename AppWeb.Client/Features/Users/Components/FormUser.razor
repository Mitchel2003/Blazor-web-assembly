@using Microsoft.AspNetCore.Components.Web
@using AppWeb.Shared.Inputs
@using AppWeb.Shared.Dtos
@using FluentValidation
@using MudBlazor

<MudCard Class="rounded-lg overflow-hidden">
    <MudCardHeader>
        <div class="flex items-center">
            <MudIcon Icon="@(_isEdit? Icons.Material.Filled.Edit : Icons.Material.Filled.PersonAdd)" Color="Color.Primary" Class="mr-2" />
            <MudText Typo="Typo.h6">@(_isEdit ? "Edit User" : "Create User")</MudText>
        </div>
    </MudCardHeader>

    <MudCardContent Class="pa-4 min-width-300">
        @if (_loading)
        {
            <div class="flex justify-center items-center min-h-[150px]">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
            </div>
        }
        else
        {
            @if (_success)
            {
                <MudAlert Severity="MudBlazor.Severity.Success" Variant="Variant.Filled" Class="mb-4">
                    @(_isEdit ? "User updated successfully!" : "User created successfully!")
                </MudAlert>
            }

            <MudForm @ref="_form" Model="@CurrentModel">
                <FluentValidator TModel="object" Validator="CurrentValidator" />

                <div class="flex flex-col gap-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                        <div class="col-span-2">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">User Information</MudText>
                            <MudDivider Class="mb-4" />
                        </div>

                        @if (_isEdit)
                        {
                            <div>
                                <MudTextField T="string" @bind-Value="_updateModel.Username" For="@(() => _updateModel.Username)" Label="Username" Placeholder="Enter username" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="_updateModel.Email" For="@(() => _updateModel.Email)" Label="Email" Placeholder="Enter email address" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Email" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="_updateModel.Password" For="@(() => _updateModel.Password)" InputType="InputType.Password" Label="Password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" Variant="Variant.Outlined" />
                            </div>
                        }
                        else
                        {
                            <div>
                                <MudTextField T="string" @bind-Value="_createModel.Username" For="@(() => _createModel.Username)" Label="Username" Placeholder="Enter username" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="_createModel.Email" For="@(() => _createModel.Email)" Label="Email" Placeholder="Enter email address" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Email" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="_createModel.Password" For="@(() => _createModel.Password)" InputType="InputType.Password" Label="Password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" Variant="Variant.Outlined" />
                            </div>
                            <div>
                                <MudTextField T="string" @bind-Value="_createModel.ConfirmPassword" For="@(() => _createModel.ConfirmPassword)" InputType="InputType.Password" Label="Confirm password" Placeholder="Enter password" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.LockReset" Variant="Variant.Outlined" />
                            </div>
                        }
                    </div>

                    <div class="mt-4">
                        <div class="col-span-2">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Additional Settings</MudText>
                            <MudDivider Class="mb-4" />
                        </div>

                        <div>
                            <MudCheckBox T="bool" @bind-Value="_isActive" Label="Active Account" Color="Color.Primary" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-4">
                                User will be able to log in and access the system
                            </MudText>
                        </div>
                    </div>
                </div>
            </MudForm>
        }
    </MudCardContent>

    <MudCardActions>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined"
                   OnClick="Cancel"
                   Disabled="@_loading">
            Cancel
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="SubmitAsync"
                   Disabled="@_loading">
            @(_isEdit ? "Update User" : "Create User")
        </MudButton>
    </MudCardActions>
</MudCard>