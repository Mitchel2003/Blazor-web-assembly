@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@page "/auth/logout"

@using AppWeb.ViewModels.Features.Contracts
@using AppWeb.ViewModels.Features.Auth
@implements IDisposable

@inject ILogoutVM ViewModel

<MudContainer Class="d-flex flex-column align-center justify-center" Style="height: 100vh;">
    @if (ViewModel.IsLoggingOut)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        <MudText Class="mt-4">Cerrando sesión...</MudText>
    }
    else if (ViewModel.LogoutCompleted)
    {
        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
        <MudText Class="mt-4">Sesión cerrada correctamente.</MudText>
        <MudText Class="mt-2">Redirigiendo...</MudText>
    }
    else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" />
        <MudText Class="mt-4">Error al cerrar sesión.</MudText>
        <MudText Class="mt-2">@ViewModel.ErrorMessage</MudText>
    }
</MudContainer>

@code {
    private void OnLogoutCompleted(object sender, LogoutCompletedEventArgs e) { StateHasChanged(); }

    protected override async Task OnInitializedAsync()
    {
        if (ViewModel is LogoutVM logoutVM) logoutVM.LogoutCompletedEvent += OnLogoutCompleted!;
        await ViewModel.InitializeAsync();
    }
    
    public void Dispose()
    { if (ViewModel is LogoutVM logoutVM) logoutVM.LogoutCompletedEvent -= OnLogoutCompleted!; }
}