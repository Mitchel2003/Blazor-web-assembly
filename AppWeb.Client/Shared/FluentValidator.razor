@using Microsoft.AspNetCore.Components.Forms
@using FluentValidation

@typeparam TModel

@code {
    [Parameter, EditorRequired] public IValidator Validator { get; set; } = default!;
    [CascadingParameter] private EditContext? CurrentEditContext { get; set; }
    private ValidationMessageStore? _messages;

    protected override void OnInitialized()
    {
        if (CurrentEditContext is null) throw new InvalidOperationException("FluentValidator requires a cascading EditContext.");
        _messages = new ValidationMessageStore(CurrentEditContext);
        CurrentEditContext.OnValidationRequested += (_, __) => ValidateModel();
        CurrentEditContext.OnFieldChanged += (_, __) => ValidateModel();
    }

    private void ValidateModel()
    {
        if (CurrentEditContext is null || _messages is null) return;
        _messages.Clear();
        if (CurrentEditContext.Model is TModel model)
        {
            var context = new ValidationContext<TModel>(model);
            var result = Validator.Validate(context);
            if (!result.IsValid)
            {
                foreach (var error in result.Errors)
                {
                    var fieldIdentifier = CurrentEditContext.Field(error.PropertyName);
                    _messages.Add(fieldIdentifier, error.ErrorMessage);
                }
            }
        }
        CurrentEditContext.NotifyValidationStateChanged();
    }
}